# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from motoman_msgs/SelectToolRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SelectToolRequest(genpy.Message):
  _md5sum = "fa612b76af0dfd1addb4c87693871b10"
  _type = "motoman_msgs/SelectToolRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
# Change the active tool file on the controller.
#
# This changes the tool definition used for both (Moto)ROS-controlled motions
# and manual jogging.
#
#
# ## Controller support
#
# This service wraps two distinct (but related) actions:
#
#  1. changing the tool file used for execution of (Moto)ROS-controlled motions
#  2. changing the tool file used for jogging
#
# Action 1 is supported by all controllers supported by MotoROS (ie: DX100,
# FS100, DX200 and YRC1000(u)).
#
# Action 2 is NOT supported on FS100 controllers. This is a limitation of
# MotoPlus, not of MotoROS.
#
# In all cases, make sure to read the following sections carefully to be aware
# of the behaviour of this service and of the Yaskawa controller after calling
# this service.
#
#
# ## FSU and PFL
#
# Tool switches through this service will be taken into account by the FSU and
# PFL safety systems if the controller has these options and they are enabled.
#
# Tool interference files, if associated with certain tool file definitions,
# will therefore also switch.
#
#
# ## Tool switch timing
#
# The active tool will be switched AFTER the controller has completed execution
# of the last trajectory segment that was sent to MotoROS BEFORE this service
# was called.
#
# The motion queue internal to MotoROS caches a number of segments in a FIFO.
# Only segments received AFTER this service was invoked will be executed with
# the new tool. Any segments received before a tool switch was invoked will use
# the old tool.
#
# To ensure motion will be executed using a certain tool, applications should
# check the 'in_motion' field (part of the RobotStatus message published on the
# 'robot_status' topic by the driver) and invoke the service when the robot has
# come to a stop (and the motion queue of MotoROS is empty). Any subsequent
# trajectories will use the new tool.
#
#
# ## Effect on trajectory execution
#
# As MotoROS currently only executes joint space trajectories, changing tool
# file with this service DOES NOT affect the execution of those trajectories.
#
# As noted earlier though, the active tool file definition will affect FSU and
# PFL behaviour, as the tool definition is used in calculation of dynamics and
# safety (see "FSU and PFL" above).
#
# To clarify: the TCP definition of the tool file is NOT taken into account when
# calculating manipulator motion based on incoming ROS JointTrajectoryAction
# goals (as JointTrajectory goals do not include any Cartesian poses, only
# absolute joint space coordinates for each axis).
#
# Instead, ROS applications should use different TF frames to define tool frames
# on the ROS side and plan their motions with the appropriate TF frame as the
# active tool.
#
# This service could then be used to notify the controller of other tool
# characteristics, such as weight, CoG and inertia by switching to a tool file
# configured with those parameters.
#
#
# ## Retrieving the active tool file
#
# MotoROS does not currently support retrieving the active tool file.
#
#
#
# For more information about tool file configuration, selection and use on
# Yaskawa controllers, refer to the relevant Yaskawa Motoman documentation.


# Numeric ID of the group the tool file is defined for.
#
# This MUST correspond to a group ID currently defined and active on the
# controller. The ROS service does not check whether the value specified here
# is legal. The MotoROS server will however check this, and will refuse to
# switch to an illegal value and will report this to the ROS driver.
#
# Callers will be notified of such failures by 'success' being set to 'false'
# and an appropriate error message being provided via the 'message' field of
# the service response.
#
# NOTE: this field is 0-based, with 0 corresponding to the first motion group,
#       1 the second, etc.
#
# legal-values: [0, total_nr_of_groups)
# required: yes (absence-causes-service-failure)
# default: no-default
uint32 group_number

# Numeric ID of the tool file to switch to for the specified group.
#
# Identical to 'group_number', specification of illegal values will result
# in failure to invoke the MotoROS service, and an unsuccessful service result
# being returned.
#
# NOTE: this field is 0-based, with 0 corresponding to the first tool file,
#       1 the second, etc.
#
# legal-values: [0, 63]
# required: yes (absence-causes-service-failure)
# default: no-default
uint32 tool_number

# TODO: might want to expose 'sequence_number' here as well

"""
  __slots__ = ['group_number','tool_number']
  _slot_types = ['uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       group_number,tool_number

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SelectToolRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.group_number is None:
        self.group_number = 0
      if self.tool_number is None:
        self.tool_number = 0
    else:
      self.group_number = 0
      self.tool_number = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.group_number, _x.tool_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.group_number, _x.tool_number,) = _get_struct_2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.group_number, _x.tool_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.group_number, _x.tool_number,) = _get_struct_2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from motoman_msgs/SelectToolResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SelectToolResponse(genpy.Message):
  _md5sum = "9bf829f07d795d3f9e541a07897da2c4"
  _type = "motoman_msgs/SelectToolResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
# A human-readable error message, or an empty string if there was no error.
string message

# true IFF invocation of the MotoROS service was successful.
#
# NOTE: this is independent of whether the ROS service invocation was
#       successful. In absence of any ROS middleware failures, a failed MotoROS
#       service invocation will result in 'success' here being set to 'false',
#       but a successful ROS service invocation.
bool success

"""
  __slots__ = ['message','success']
  _slot_types = ['string','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       message,success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SelectToolResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.message is None:
        self.message = ''
      if self.success is None:
        self.success = False
    else:
      self.message = ''
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SelectTool(object):
  _type          = 'motoman_msgs/SelectTool'
  _md5sum = 'afb2fb884fcd9c28c81c82056d543156'
  _request_class  = SelectToolRequest
  _response_class = SelectToolResponse
