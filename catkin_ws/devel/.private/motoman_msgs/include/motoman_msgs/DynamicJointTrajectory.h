// Generated by gencpp from file motoman_msgs/DynamicJointTrajectory.msg
// DO NOT EDIT!


#ifndef MOTOMAN_MSGS_MESSAGE_DYNAMICJOINTTRAJECTORY_H
#define MOTOMAN_MSGS_MESSAGE_DYNAMICJOINTTRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <motoman_msgs/DynamicJointPoint.h>

namespace motoman_msgs
{
template <class ContainerAllocator>
struct DynamicJointTrajectory_
{
  typedef DynamicJointTrajectory_<ContainerAllocator> Type;

  DynamicJointTrajectory_()
    : header()
    , joint_names()
    , points()  {
    }
  DynamicJointTrajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , joint_names(_alloc)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector< ::motoman_msgs::DynamicJointPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::motoman_msgs::DynamicJointPoint_<ContainerAllocator> >::other >  _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct DynamicJointTrajectory_

typedef ::motoman_msgs::DynamicJointTrajectory_<std::allocator<void> > DynamicJointTrajectory;

typedef boost::shared_ptr< ::motoman_msgs::DynamicJointTrajectory > DynamicJointTrajectoryPtr;
typedef boost::shared_ptr< ::motoman_msgs::DynamicJointTrajectory const> DynamicJointTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator1> & lhs, const ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.joint_names == rhs.joint_names &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator1> & lhs, const ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motoman_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81bfbf2d02070fdef3a528bd72b49257";
  }

  static const char* value(const ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81bfbf2d02070fdeULL;
  static const uint64_t static_value2 = 0xf3a528bd72b49257ULL;
};

template<class ContainerAllocator>
struct DataType< ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motoman_msgs/DynamicJointTrajectory";
  }

  static const char* value(const ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#length: true message/data length\n"
"#header: \n"
"#sequence:\n"
"#num_groups: # of motion groups included in this message\n"
"#group[]: DynamicJointPoint from DynamicJointPoint.msg\n"
"\n"
"Header header\n"
"string[] joint_names\n"
"DynamicJointPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: motoman_msgs/DynamicJointPoint\n"
"# DynamicJointPoint\n"
"#group: # length of this array must match num_groups\n"
"#    id:   control-group ID for use on-controller\n"
"#    num_joints: # of joints in this motion group\n"
"#    valid_fields: #bit field for following items\n"
"#    # length of the following items must match num_joints, order set by controller.  Invalid fields (see bit field above) are not included, resulting in a shorter message.\n"
"#    positions[]\n"
"#    velocities[]\n"
"#    accelerations[]\n"
"#    effort[]\n"
"#    time_from_start\n"
"\n"
"int16 num_groups\n"
"DynamicJointsGroup[] groups\n"
"\n"
"================================================================================\n"
"MSG: motoman_msgs/DynamicJointsGroup\n"
"# DynamicJointsGroup\n"
"#group: # length of this array must match num_groups\n"
"#    id:   control-group ID for use on-controller\n"
"#    num_joints: # of joints in this motion group\n"
"#    valid_fields: #bit field for following items\n"
"#    # length of the following items must match num_joints, order set by controller.  Invalid fields (see bit field above) are not included, resulting in a shorter message.\n"
"#    positions[]\n"
"#    velocities[]\n"
"#    accelerations[]\n"
"#    effort[]\n"
"#    time_from_start\n"
"\n"
"\n"
"int16 group_number\n"
"int16 num_joints\n"
"int16 valid_fields\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.joint_names);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DynamicJointTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motoman_msgs::DynamicJointTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::motoman_msgs::DynamicJointPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOMAN_MSGS_MESSAGE_DYNAMICJOINTTRAJECTORY_H
