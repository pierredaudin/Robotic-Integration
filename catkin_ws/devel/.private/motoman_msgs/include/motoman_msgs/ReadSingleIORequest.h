// Generated by gencpp from file motoman_msgs/ReadSingleIORequest.msg
// DO NOT EDIT!


#ifndef MOTOMAN_MSGS_MESSAGE_READSINGLEIOREQUEST_H
#define MOTOMAN_MSGS_MESSAGE_READSINGLEIOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motoman_msgs
{
template <class ContainerAllocator>
struct ReadSingleIORequest_
{
  typedef ReadSingleIORequest_<ContainerAllocator> Type;

  ReadSingleIORequest_()
    : address(0)  {
    }
  ReadSingleIORequest_(const ContainerAllocator& _alloc)
    : address(0)  {
  (void)_alloc;
    }



   typedef uint32_t _address_type;
  _address_type address;





  typedef boost::shared_ptr< ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> const> ConstPtr;

}; // struct ReadSingleIORequest_

typedef ::motoman_msgs::ReadSingleIORequest_<std::allocator<void> > ReadSingleIORequest;

typedef boost::shared_ptr< ::motoman_msgs::ReadSingleIORequest > ReadSingleIORequestPtr;
typedef boost::shared_ptr< ::motoman_msgs::ReadSingleIORequest const> ReadSingleIORequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator1> & lhs, const ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator2> & rhs)
{
  return lhs.address == rhs.address;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator1> & lhs, const ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motoman_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7522928648cae826d000156b5f561c00";
  }

  static const char* value(const ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7522928648cae826ULL;
  static const uint64_t static_value2 = 0xd000156b5f561c00ULL;
};

template<class ContainerAllocator>
struct DataType< ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motoman_msgs/ReadSingleIORequest";
  }

  static const char* value(const ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# Read (and return) the current value of the IO element at 'address'.\n"
"#\n"
"# Addresses are plain, base-10 integers, as used and displayed by the controller\n"
"# (on the teach pendant for instance).\n"
"#\n"
"# There are no restrictions as to which IO elements can be read, but they have\n"
"# to exist on the controller and be configured correctly.\n"
"#\n"
"# Refer also the Yaskawa Motoman documentation on IO addressing and\n"
"# configuration.\n"
"\n"
"uint32 address\n"
;
  }

  static const char* value(const ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.address);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReadSingleIORequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motoman_msgs::ReadSingleIORequest_<ContainerAllocator>& v)
  {
    s << indent << "address: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.address);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOMAN_MSGS_MESSAGE_READSINGLEIOREQUEST_H
